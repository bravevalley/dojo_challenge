---
services:
  db:
    image: postgres:15
    container_name: "db"
    environment:
      - POSTGRES_PASSWORD=babyshark
      - POSTGRES_USER=app
      - POSTGRES_DB=app
    expose:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "psql -U app -d app -c 'SELECT 1' || exit 1"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s  
    networks:
      - appstack


  adminer:
    image: adminer
    container_name: db_admin
    restart: always
    ports:
      - 8080:8080
    labels:
      - traefik.enable=true
      - traefik.http.routers.db-admin.rule=Host(`db.localhost`)
      - traefik.http.routers.db-admin.entrypoints=web
    networks:
      - appstack

  api:
    container_name: api
    build:
      context: ./backend
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
    ports:
      - 8000:8000
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=PathPrefix(`/api`)
      - traefik.http.routers.api.entrypoints=web
      - traefik.http.routers.docs.rule=PathPrefix(`/docs`)
      - traefik.http.routers.docs.service=swagger
      - traefik.http.services.swagger.loadbalancer.server.url="http://localhost:8000/docs"
      - traefik.http.routers.docs.entrypoints=web
    networks:
      - appstack

  frontend:
    container_name: ui
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - 5173:5173
    labels:
      - traefik.enable=true
      - traefik.http.routers.frontend.rule=Host(`localhost`)
      - traefik.http.routers.frontend.entrypoints=web
    networks:
      - appstack

  rproxy:
    container_name: rproxy
    image: traefik:v3.2
    ports:
      - "80:80"
      - "443:443"
      - "8008:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./.traefik.yml:/etc/traefik/traefik.yml:ro
    networks:
      - appstack

networks:
  appstack:
    name: appstack
